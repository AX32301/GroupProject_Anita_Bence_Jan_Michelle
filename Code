import yfinance as yf
import pandas as pd
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import math
import csv

ticker = input("Please enter the ticker: ")
end=dt.date.today()

while True:
    try:
        start = input("Please enter the start date(yyyy-mm-dd): ")
        start_date=dt.datetime.strptime(start, "%Y-%m-%d")
        break
    except ValueError:
        print("Invalid input")

while True:
    try:
        T=int(input("Please specify the forecast horizon (in days): "))
        break
    except ValueError:
        print("Invalid input")

while True:
    try:
        simruns=int(input("Please specify the number of simulations: "))
        break
    except ValueError:
        print("Invalid input")

stock_data = yf.download(ticker, start, end)
returns = stock_data['Adj Close'].pct_change()
daily_vol = returns.std()
returns_mean = returns.mean()
count = 0
price_list = []
last_price = stock_data['Adj Close'][-1]
df = pd.DataFrame()
last_price_list = []

for x in range(simruns):
    count = 0
    price_list = []
    price = last_price * math.exp((returns_mean-0.5*daily_vol*daily_vol)+daily_vol*np.random.normal(0, 1))
    price_list.append(price)

    for y in range(T-1):
        price = price_list[count] * math.exp((returns_mean-0.5*daily_vol*daily_vol)+daily_vol*np.random.normal(0, 1))
        price_list.append(price)
        count += 1

    df[x] = price_list
    last_price_list.append(price_list[-1])

fig = plt.figure()
fig.suptitle("Monte Carlo Simulation: %s" %ticker)
plt.plot(df)
plt.xlabel('Days')
plt.ylabel('Price')
plt.savefig('chart.png', dpi=100)
plt.show()

expected=np.mean(last_price_list)
print("Expected price of %s in %d days: %s" % (ticker, T, expected))
print("5th percentile: ", np.percentile(last_price_list, 5))
print("95th percentile: ", np.percentile(last_price_list, 95))

dates=[]
nextdate=end
for x in range(T):
    nextdate+=dt.timedelta(days=1)
    dates.append(nextdate)

df.insert(0,"Future dates", dates)

writer = pd.ExcelWriter('simulated_prices.xlsx', engine='xlsxwriter')
writer.save()
df.to_excel('simulated_prices.xlsx', sheet_name='sheet1', index=False)
