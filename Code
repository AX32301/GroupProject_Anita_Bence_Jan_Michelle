import yfinance as yf
import pandas as pd
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import math


#MONTE CARLO SIMULATION
#This program simulates future stock prices for a user-defined ticker.
#A chart of the simulated paths & an Excel file containing the data will be saved on the user's device.


#Gathering user inputs
#The user has to specify the ticker, the starting date for the estimation of mean historical returns & volatility, the forecast horizon(T) and the number of simulations (simruns).
#The user inputs get checked for correct format. In case of an error, the input request is repeated.

ticker = input("Please enter the ticker (e.g. TSLA): ")
#The ticker variable is checked by the yfinance formula. In case of an invalid ticker, an error will be displayed.
end=dt.date.today()

while True:
    try:
        start = input("Please enter the start date for historical data(yyyy-mm-dd): ")
        start_date=dt.datetime.strptime(start, "%Y-%m-%d")
        break
    except ValueError:
        print("Invalid input")

while True:
    try:
        T=int(input("Please specify the forecast horizon (in days): "))
        break
    except ValueError:
        print("Invalid input")

while True:
    try:
        simruns=int(input("Please specify the number of simulations: "))
        break
    except ValueError:
        print("Invalid input")

#Calculation of core variables
stock_data = yf.download(ticker, start, end)    #Gather historical data for the specified ticker (Yahoo Finance)
returns = stock_data['Adj Close'].pct_change()  #Calculate daily returns
daily_vol = returns.std()
returns_mean = returns.mean()
count = 0
price_list = []
last_price = stock_data['Adj Close'][-1]
df = pd.DataFrame()
last_price_list = []

#Simulation: the outer loop(x) initiates the different simulations, the inner loop(y) calculates the daily future values.
for x in range(simruns):
    count = 0
    price_list = []
    price = last_price * math.exp((returns_mean-0.5*daily_vol*daily_vol)+daily_vol*np.random.normal(0, 1))
    price_list.append(price)

    for y in range(T-1):
        price = price_list[count] * math.exp((returns_mean-0.5*daily_vol*daily_vol)+daily_vol*np.random.normal(0, 1))
        price_list.append(price)
        count += 1

    df[x] = price_list
    last_price_list.append(price_list[-1])

#Figure: display & save the plot
fig = plt.figure()
fig.suptitle("Monte Carlo Simulation: %s" %ticker)
plt.plot(df)
plt.xlabel('Days')
plt.ylabel('Price')
plt.savefig('chart.png', dpi=100)
plt.show()

#Calculate the expected value of the stock at day T as the mean of all simulated final values
expected=np.mean(last_price_list)
print("Expected price of %s in %d days: %s" % (ticker, T, expected))
print("5th percentile: ", np.percentile(last_price_list, 5))
print("95th percentile: ", np.percentile(last_price_list, 95))

#Add dates to the table
dates=[]
nextdate=end
for x in range(T):
    nextdate+=dt.timedelta(days=1)
    dates.append(nextdate)
df.insert(0,"Future dates", dates)

#Save the table as an Excel file
writer = pd.ExcelWriter('simulated_prices.xlsx', engine='xlsxwriter')
writer.save()
df.to_excel('simulated_prices.xlsx', sheet_name='sheet1', index=False)
